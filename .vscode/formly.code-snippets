{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "formlyPhoneNumbers": {
    "prefix": "formlyPhoneNumbers",
    "body": [
      "{",
      "      key: 'phoneNumbers',",
      "      type: 'repeat',",
      "      fieldArray: {",
      "        fieldGroup: [",
      "          ",
      "        ]",
      "      }",
      "    }"
    ],
    "description": "formlyPhoneNumbers"
  },
  "formlyContacts": {
    "prefix": "formlyContacts",
    "body": [
      "{",
      "            key: 'contactTypeId',",
      "            type: 'select',",
      "            templateOptions: {",
      "              label: 'Type',",
      "              options: [",
      "                {",
      "                  value: 1,",
      "                  label: 'Private'",
      "                },",
      "                {",
      "                  value: 2,",
      "                  label: 'Work'",
      "                }",
      "              ]",
      "            }",
      "          },",
      "          {",
      "            key: 'number',",
      "            type: 'input',",
      "            className: 'js-group',",
      "            templateOptions: {",
      "              label: 'Number'",
      "            }",
      "          }"
    ],
    "description": "formlyContacts"
  },
  "formlyValueChanges": {
    "prefix": "formlyValueChanges",
    "body": [
      "field.form",
      "            .get('nationId')",
      "            .valueChanges.pipe(",
      "              startWith(this.model.nationId),",
      "              switchMap(nationId => this.cityService.getCities(nationId))",
      "            )",
      "            .subscribe(cities => {",
      "              field.templateOptions.options = cities;",
      "            });"
    ],
    "description": "formlyValueChanges"
  },
  "formlyValidationMessage": {
    "prefix": "formlyValidationMessage",
    "body": [
      "validation: {",
      "        messages: {",
      "          min: 'Sorry, you have to be of legal age.'",
      "        }",
      "      }"
    ],
    "description": "formlyValidationMessage"
  }
}
